---
- name: Check if CA cert contains a chain
  shell: grep -c END {{ java_keystore_cacert }}
  register: checkcacert

- name: Create folder
  file:
    path: "{{ java_keystore_path }}"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Split CA cert
  shell: awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "{{ java_keystore_path }}""/ca." c ".pem"}' < "{{ java_keystore_cacert }}"
  when: ( checkcacert.stdout | int ) > 1

- name: Check if truststore.jks exists
  stat:
    path: "{{ java_keystore_path }}/truststore.jks"
  register: stat_exists_truststore

- name: CA Chain - Get list of CA split
  find:
    paths: "{{ java_keystore_path }}"
    patterns: 'ca.*.pem'
  when: ( checkcacert.stdout | int ) > 1
  register: listcasplit

- name: Clean tmp file
  shell: cat /dev/null > /tmp/catoinsert

- name: CA Chain - Check if all CA cert are in the truststore
  shell: >
    {{ java_bin_dir }}/keytool -list -v -keystore "{{ java_keystore_path}}/truststore.jks" -storepass {{ java_keystore_truststore_password }} |
    grep `openssl x509 -noout -fingerprint -md5 -inform pem -in '{{ item.path }}' | awk -F"=" '{print $2}'` || echo '{{ item.path }}' >> /tmp/catoinsert
  when: ( checkcacert.stdout | int ) > 1
  with_items: "{{ listcasplit.files }}"

- name: CA Chain - Get the file contents
  command: cat /tmp/catoinsert
  register: my_items
  when: ( checkcacert.stdout | int ) > 1

- name: CA Chain - Create the truststore with CA split
  shell: >
    {{ java_bin_dir }}/keytool -noprompt -import -trustcacerts -keystore "{{ java_keystore_path}}/truststore.jks" -storepass {{ java_keystore_truststore_password }} 
    -alias ca`echo {{ item }} | grep -o -P '(?<=ca).*(?=.pem)'` -file "{{ item }}"
  when: ( checkcacert.stdout | int ) > 1 and my_items.changed == True
  with_items: "{{my_items.stdout_lines}}"

- name: Check the alias already exists in the truststore
  shell: >
    {{ java_bin_dir }}/keytool -list -v -keystore "{{ java_keystore_path}}/truststore.jks" -storepass {{ java_keystore_truststore_password }} -alias {{ java_keystore_ca_realm }}
  when: stat_exists_truststore.stat.exists == True and ( checkcacert.stdout | int ) == 1
  register: stat_truststore

- name: Create the truststore
  shell: >
    {{ java_bin_dir }}/keytool -noprompt -import -trustcacerts -keystore "{{ java_keystore_path }}/truststore.jks" -storepass {{ java_keystore_truststore_password }} -alias {{ java_keystore_ca_realm }} -file "{{ java_keystore_cert_folder }}/{{ java_keystore_cacert_name }}"
  failed_when: stat_truststore == 0
  when: ( checkcacert.stdout | int ) == 1

- name: Check if keystore.jks exists
  stat:
    path: "{{ java_keystore_path}}/keystore.jks"
  register: stat_exists_keystore

- name: Check the alias already exists in the keystore
  shell: >
    {{ java_bin_dir }}/keytool -list -v -keystore "{{ java_keystore_path}}/keystore.jks" -storepass {{ java_keystore_keystore_password }} -alias {{ item }}
  with_items: "{{groups.all}}"
  when: stat_exists_keystore.stat.exists == True
  failed_when: stat_exists_keystore.stat.exists == False
  register: stat_keystore

- name: Create PKCS12
  command: openssl pkcs12 -export -name {{ inventory_hostname }} -in "{{ java_keystore_cert_folder }}/{{ inventory_hostname }}.cert.pem" -inkey "{{ java_keystore_cert_folder }}/{{ inventory_hostname }}.key.pem" -out "/tmp/{{ inventory_hostname }}.pkcs12" -password pass:{{ java_keystore_keystore_password }}
  failed_when: stat_keystore == 0

- name: Create the keystore
  command: >
    {{ java_bin_dir }}/keytool -noprompt -importkeystore -destkeystore {{ java_keystore_path }}/keystore.jks -deststorepass {{ java_keystore_keystore_password }} -srckeystore /tmp/{{ inventory_hostname }}.pkcs12 -srcstoretype pkcs12 -srcstorepass {{ java_keystore_keystore_password }} -alias {{ inventory_hostname }}
  failed_when: stat_keystore == 0

- name: Check Java keystore
  shell: >
    {{ java_bin_dir }}/keytool -list -keystore {{java_default_dir}}/jre/lib/security/cacerts -storepass changeit | grep {{ security_ssl_cacert_alias }}
  register: stat_exists_java_keystore
  ignore_errors: True

- debug:
      msg: "{{stat_exists_java_keystore.rc}}"

- name: Import to Java
  command: >
    {{ java_bin_dir }}/keytool -noprompt -import -trustcacerts -alias {{ security_ssl_cacert_alias }} -file {{ java_keystore_cacert }} -keystore {{java_default_dir}}/jre/lib/security/cacerts -storepass changeit
  when: stat_exists_java_keystore.rc ==  1

- file:
    path: "{{ java_keystore_path }}/keystore.jks"
    owner: root
    group: hadoop
    mode: 0644

- file:
    path: "{{ java_keystore_path }}/truststore.jks"
    owner: root
    group: hadoop
    mode: 0644

- name: Cleaning
  file:
    path: '{{ item}}'
    state: absent
  with_items:
    - /tmp/*.pkcs12
    - /tmp/catoinsert
